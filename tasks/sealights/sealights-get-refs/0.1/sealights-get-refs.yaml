---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sealights-get-refs
  labels:
    konflux-ci/sealights: "true"
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: konflux
spec:
  description: |
    The sealights-get-refs Task is responsible for retrieving metadata associated with Sealights
    instrumentation in a CI pipeline. This includes information about the Sealights Build Session ID,
    the source artifact type, the instrumented container image, and the build name.
    The Task fetches this metadata by parsing attestation information of the container image specified
    in the SNAPSHOT parameter using cosign.
  results:
    - name: sealights-source-artifact
      description: The source code OCI artifact that was instrumented with sealights.
    - name: sealights-bsid
      description: The Build Session ID (BSID) generated during the build for sealights.
    - name: sealights-container-image
      description: The container image used in the Sealights instrumentation process.
    - name: sealights-build-name
      description: The build name generated by sealights instrumentation.
    - name: container-image
      description: The container image built from the specified Git revision without Sealights instrumentation.
    - name: component-source-artifact
      description: The OCI artifact containing the source code of the pristine image.
    - name: sealights-container-repo
      description: The image repository of the Sealights-instrumented image (without digest).
    - name: sealights-container-tag
      description: The tag used for the Sealights-instrumented image.
  params:
    - name: SNAPSHOT
      description: The JSON string of the Snapshot under test.
  steps:
    - name: sealights-get-refs
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      env:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: KONFLUX_COMPONENT_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['appstudio.openshift.io/component']
        - name: EVENT_TYPE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['pac.test.appstudio.openshift.io/event-type']
        - name: PULL_REQUEST_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['pac.test.appstudio.openshift.io/pull-request']
      script: |
        #!/bin/bash
        set -euo pipefail

        COMPONENT_CONTAINER_IMAGE=$(jq -r --arg component_name "$KONFLUX_COMPONENT_NAME" '.components[] | select(.name == $component_name) | .containerImage' <<< "$SNAPSHOT")
        COMPONENT_REVISION=$(jq -r --arg component_name "$KONFLUX_COMPONENT_NAME" '.components[] | select(.name == $component_name) | .source.git.revision' <<< "$SNAPSHOT")

        if [[ "$EVENT_TYPE" != "push" && -n "$PULL_REQUEST_NUMBER" ]]; then
          EVENT_TYPE="pull_request"
        elif [[ -z "$PULL_REQUEST_NUMBER" && "$EVENT_TYPE" != "push" ]]; then
          EVENT_TYPE="push"
        fi

        # Download cosign attestation metadata
        cosign download attestation "${COMPONENT_CONTAINER_IMAGE}" > cosign_metadata.json

         # Set the container image ref to a format quay.io/<org>/<repo>:<tag>@sha256:<sha256-value>
        COMPONENT_CONTAINER_IMAGE_WITH_TAG="$(jq -r '
            .payload | @base64d | fromjson | .predicate.buildConfig.tasks[] |
            select(.ref.params[].value == "init") | .invocation.parameters["image-url"]
          ' cosign_metadata.json)"
        IMAGE_REPO="${COMPONENT_CONTAINER_IMAGE_WITH_TAG%%:*}"
        IMAGE_TAG="${COMPONENT_CONTAINER_IMAGE_WITH_TAG##*:}"
        IMAGE_SHA="${COMPONENT_CONTAINER_IMAGE##*@sha256:}"
        COMPONENT_CONTAINER_IMAGE="$IMAGE_REPO:$IMAGE_TAG@sha256:$IMAGE_SHA"

        COMPONENT_SOURCE_ARTIFACT="$(jq -r '
          .payload | @base64d | fromjson | .predicate.buildConfig.tasks[] |
          select(.name == "clone-repository") |
          .results[] | select(.name == "SOURCE_ARTIFACT") | .value
        ' cosign_metadata.json)"

        SL_BSID="$(jq -r '
          .payload | @base64d | fromjson | .predicate.buildConfig.tasks[] |
          select(.invocation.environment.labels."konflux-ci/sealights" == "true") |
          .results[] | select(.name == "sealights-bsid") | .value
        ' cosign_metadata.json)"

        SL_SOURCE_ARTIFACT="$(jq -r '
          .payload | @base64d | fromjson | .predicate.buildConfig.tasks[] |
          select(.invocation.environment.labels."konflux-ci/sealights" == "true") |
          .results[] | select(.name == "SOURCE_ARTIFACT") | .value
        ' cosign_metadata.json)"

        SL_CONTAINER_IMAGE=""
        if [[ -n "$SL_SOURCE_ARTIFACT" ]]; then
          SL_CONTAINER_IMAGE="$(jq -r --arg sl_source_artifact "$SL_SOURCE_ARTIFACT" '
            .payload | @base64d | fromjson | .predicate.buildConfig.tasks[] |
            select(.invocation.parameters.SOURCE_ARTIFACT == $sl_source_artifact) |
            select(.ref.params[].value == "buildah-oci-ta") |
            .results[] | select(.name == "IMAGE_REF") | .value
          ' cosign_metadata.json)"
        else
          SL_CONTAINER_IMAGE="$(jq -r '
            .payload | @base64d | fromjson |
            first(
              .predicate.buildConfig.tasks[] |
              select(.invocation.parameters.IMAGE? // "" | test("sealights")) |
              .invocation.parameters.IMAGE
            )
          ' cosign_metadata.json)"
        fi

        if [[ -z "$SL_CONTAINER_IMAGE" ]]; then
          echo "[WARNING] Sealights container image not found in cosign metadata. Defaulting to component image."
          SL_CONTAINER_IMAGE="$COMPONENT_CONTAINER_IMAGE"
        fi

        SL_BUILD_NAME="$(jq -r '
          .payload | @base64d | fromjson | .predicate.buildConfig.tasks[] |
          select(.invocation.environment.labels."konflux-ci/sealights" == "true") |
          .results[] | select(.name == "sealights-build-name") | .value
        ' cosign_metadata.json)"

        # Extract repo and tag from image
        SL_IMAGE_WITHOUT_SHA="${SL_CONTAINER_IMAGE%%@sha256:*}"
        SEALIGHTS_CONTAINER_TAG="${SL_IMAGE_WITHOUT_SHA##*:}"
        SEALIGHTS_CONTAINER_REPO="${SL_IMAGE_WITHOUT_SHA%:*}"

        # If tag is missing, default it based on event type
        if [[ -z "$SEALIGHTS_CONTAINER_TAG" ]]; then
          if [[ "$EVENT_TYPE" == "pull_request" ]]; then
            SEALIGHTS_CONTAINER_TAG="on-pr-${COMPONENT_REVISION}"
          elif [[ "$EVENT_TYPE" == "push" ]]; then
            SEALIGHTS_CONTAINER_TAG="${COMPONENT_REVISION}"
          else
            echo "[WARN] Unknown EVENT_TYPE: $EVENT_TYPE. Defaulting tag to revision."
            SEALIGHTS_CONTAINER_TAG="${COMPONENT_REVISION}"
          fi
          echo "[INFO] No tag found, defaulting to: $SEALIGHTS_CONTAINER_TAG"
        fi

        echo "Component metadata:"
        echo "  Container image: $COMPONENT_CONTAINER_IMAGE"
        echo "  Git revision: $COMPONENT_REVISION"
        echo "  Source artifact: $COMPONENT_SOURCE_ARTIFACT"

        echo "Sealights metadata:"
        echo "  Build Session ID: $SL_BSID"
        echo "  Trusted Artifact: $SL_SOURCE_ARTIFACT"
        echo "  Instrumented Image: $SL_CONTAINER_IMAGE"
        echo "  Image Repo: $SEALIGHTS_CONTAINER_REPO"
        echo "  Image Tag: $SEALIGHTS_CONTAINER_TAG"
        echo "  Build Name: $SL_BUILD_NAME"

        # Write Tekton results
        echo -n "$SL_SOURCE_ARTIFACT" > $(results.sealights-source-artifact.path)
        echo -n "$SL_BSID" > $(results.sealights-bsid.path)
        echo -n "$SL_CONTAINER_IMAGE" > $(results.sealights-container-image.path)
        echo -n "$SL_BUILD_NAME" > $(results.sealights-build-name.path)
        echo -n "$COMPONENT_CONTAINER_IMAGE" > $(results.container-image.path)
        echo -n "$COMPONENT_SOURCE_ARTIFACT" > $(results.component-source-artifact.path)
        echo -n "$SEALIGHTS_CONTAINER_REPO" > $(results.sealights-container-repo.path)
        echo -n "$SEALIGHTS_CONTAINER_TAG" > $(results.sealights-container-tag.path)
