---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: deploy-konflux-ci
  labels:
    konflux-ci/kind: "true"
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.44.x"
    tekton.dev/tags: konflux
spec:
  description: |
    This task performs a full Konflux CI deployment. It clones the specified Git repository,
    checks out the desired branch, and runs deployment scripts using a kubeconfig retrieved from
    a Kubernetes secret. It is intended for use in OpenShift Pipelines or other Tekton environments.

  params:
    - name: cluster-access-secret
      description: Name of the Kubernetes Secret that contains the kubeconfig (base64 encoded) used to access the target cluster.
    - name: repo-url
      description: URL of the Git repository containing the Konflux CI deployment scripts.
      default: https://github.com/konflux-ci/konflux-ci.git
    - name: repo-branch
      description: Git branch to check out when cloning the repository.
      default: main
    - name: create-test-resources
      description: 'Indicates if a set of test resources should be installed'
      default: 'true'
    - name: component-name
      description: |
        The GitHub repository name of the Konflux CI component to customize (e.g., `build-service`, `release-service`).
        Used for applying image or Kubernetes manifest overrides.
      default: ''
    - name: component-image-repository
      description: |
        Overrides the container image repository for the `component-name` (e.g., `quay.io/my-org/my-custom-image`).
      default: ''
    - name: component-image-tag
      description: |
        Overrides the container image tag for the `component-name` (e.g., `latest`, `my-feature-branch`).
      default: ''
    - name: component-pr-owner
      description: |
        GitHub owner (user|org) of the fork/PR providing custom Kubernetes manifests for the `component-name`.
      default: ''
    - name: component-pr-sha
      description: |
        Commit SHA of the PR (from `component-pr-owner`) supplying custom Kubernetes manifests for the `component-name`.
      default: ''
    - name: component-pr-source-branch
      description: |
        GitHub source branch of the pull request.
      default: ''
    - name: oci-ref
      type: string
      description: Full OCI artifact reference in a format "quay.io/org/repo:tag. It's used for storing logs from the Task's Steps
    - name: oci-credentials
      type: string
      description: |
        The secret name containing credentials for container registry where the artifacts will be stored.
      default: "konflux-test-infra"

  volumes:
    - name: credentials
      secret:
        secretName: $(params.cluster-access-secret)
    - name: workdir
      emptyDir: {}
    - name: logs
      emptyDir: {}
    - name: konflux-test-infra-volume
      secret:
        secretName: $(params.oci-credentials)

  stepTemplate:
    env:
      - name: KUBECONFIG
        value: '/credentials/kubeconfig'
      - name: LOG_FILENAME
        value: '/var/log-dir/deploy-konflux-ci.log'
    volumeMounts:
      - name: credentials
        mountPath: /credentials
      - name: workdir
        mountPath: /var/workdir
      - name: logs
        mountPath: /var/log-dir/

  steps:
    - name: clone-konflux-ci
      image: quay.io/openshift-pipeline/pipelines-git-init-rhel9@sha256:7eee14366c516d92cf7480c9bc256cf0e544bf06da5d46ffb5e8bfe3e448326c
      onError: continue
      workingDir: /var/workdir
      securityContext:
        runAsUser: 0
      args:
        - -url=$(params.repo-url)
        - -revision=$(params.repo-branch)
        - -path=.
    - name: solve-pr-pairing
      image: quay.io/konflux-ci/tekton-integration-catalog/utils:latest
      onError: continue
      workingDir: /var/workdir
      when:
        - input: "$(params.component-name)"
          operator: notin
          values: [ "" ]
      env:
        - name: COMPONENT_NAME
          value: "$(params.component-name)"
        - name: PR_SOURCE_BRANCH
          value: "$(params.component-pr-source-branch)"
        - name: PR_AUTHOR
          value: "$(params.component-pr-owner)"
        - name: PR_SHA
          value: "$(params.component-pr-sha)"
      script: |
        #!/bin/bash
        set -euo pipefail

        {
          echo "[INFO] Fetching and executing solve-pr-pairing.sh..."
          curl -sSfL https://raw.githubusercontent.com/konflux-ci/tekton-integration-catalog/main/scripts/konflux-ci-deploy/solve-pr-pairing.sh | bash
        } 2>&1 | tee -a $LOG_FILENAME
    - name: update-kustomization
      image: quay.io/konflux-ci/tekton-integration-catalog/utils:latest
      onError: continue
      workingDir: /var/workdir
      when:
        - input: "$(params.component-name)"
          operator: notin
          values: [ "" ]
      script: |
        #!/bin/bash
        set -euo pipefail

        {
          if [ -f /var/workdir/.env ]; then
            echo "[INFO] Loading env vars from /var/workdir/.env: $(cat /var/workdir/.env)"
            source /var/workdir/.env
          else
            echo "[INFO] Loading env vars from parameters"

            COMPONENT_NAME="$(params.component-name)"
            IMAGE_REPO="$(params.component-image-repository)"
            IMAGE_TAG="$(params.component-image-tag)"
            PR_OWNER="$(params.component-pr-owner)"
            PR_SHA="$(params.component-pr-sha)"
          fi

          # Repo names do not match the ones of the component. Try to find the right kustomization.yaml based on the component name.
          KUSTOMIZATION_PATH=$(find konflux-ci/ -type f -name "kustomization.yaml" -path "*${COMPONENT_NAME%-service}*/core/*" | head -n 1)

          # Check if the file exists
          if [[ ! -f "${KUSTOMIZATION_PATH}" ]]; then
            echo "[WARNING] No substitutions will be applied as the kustomization file for $(params.component-name) has not been found."
            exit 0
          fi

          # Apply substitutions
          if [[ -n "$IMAGE_REPO" ]]; then
            echo "[INFO] Updating image repository to $IMAGE_REPO"
            yq -i e "(.images.[] | select(.name==\"quay.io/konflux-ci/${COMPONENT_NAME}\")) |= .newName=\"${IMAGE_REPO}\"" "$KUSTOMIZATION_PATH"
          fi

          if [[ -n "$IMAGE_TAG" ]]; then
            echo "[INFO] Updating image tag to $IMAGE_TAG"
            yq -i e "(.images.[] | select(.name==\"quay.io/konflux-ci/${COMPONENT_NAME}\")) |= .newTag=\"${IMAGE_TAG}\"" "$KUSTOMIZATION_PATH"
          fi

          if [[ -n "$PR_OWNER" && -n "$PR_SHA" ]]; then
            echo "[INFO] Updating GitHub reference to $PR_OWNER@$PR_SHA"
            yq -i e "(.resources[] | select(. ==\"*github.com/konflux-ci/${COMPONENT_NAME}/config/default*\")) |= \"https://github.com/${PR_OWNER}/${COMPONENT_NAME}/config/default?ref=${PR_SHA}\"" "$KUSTOMIZATION_PATH"
            yq -i e "(.resources[] | select(. ==\"*github.com/konflux-ci/${COMPONENT_NAME}/config/snapshotgc*\")) |= \"https://github.com/${PR_OWNER}/${COMPONENT_NAME}/config/snapshotgc?ref=${PR_SHA}\"" "$KUSTOMIZATION_PATH"
          fi
        } 2>&1 | tee -a $LOG_FILENAME

    - name: deploy
      image: quay.io/konflux-ci/tekton-integration-catalog/utils:latest
      onError: continue
      workingDir: /var/workdir
      script: |
        #!/bin/bash
        set -euo pipefail
        
        {
          kubectl cluster-info

          echo "[INFO] Installing Konflux CI dependencies"
          ./deploy-deps.sh
          ./wait-for-all.sh

          echo "[INFO] Installing Konflux CI..."
          ./deploy-konflux.sh

          kubectl get po -A
        } 2>&1 | tee -a $LOG_FILENAME
    - name: create-test-resources
      image: quay.io/konflux-ci/tekton-integration-catalog/utils:latest
      onError: continue
      workingDir: /var/workdir
      when:
        - input: "$(params.create-test-resources)"
          operator: in
          values: ["true"]
      script: |
        #!/bin/bash
        set -euo pipefail

        {
        echo "[INFO] Applying Kyverno to reduce resources for testing"
        kubectl apply -f ./dependencies/kyverno/policy/e2e-reduce-resources.yaml

        echo "[INFO] Creating Test Resources..."
        ./deploy-test-resources.sh
        } 2>&1 | tee -a $LOG_FILENAME

    - name: secure-push-oci
      ref:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/tekton-integration-catalog.git
          - name: revision
            value: main
          - name: pathInRepo
            value: stepactions/secure-push-oci/0.1/secure-push-oci.yaml
      params:
        - name: workdir-path
          value: /var/log-dir/
        - name: oci-ref
          value: $(params.oci-ref)
        - name: credentials-volume-name
          value: konflux-test-infra-volume
    - name: fail-if-any-step-failed
      ref:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/tekton-integration-catalog.git
          - name: revision
            value: main
          - name: pathInRepo
            value: stepactions/fail-if-any-step-failed/0.1/fail-if-any-step-failed.yaml