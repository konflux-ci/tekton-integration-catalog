---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: quality-dashboard-metrics
spec:
  description: |
    The `quality-dashboard-metrics` Task uploads test execution metadata and reports to a quality dashboard API.
    It collects information such as the job name, test event type (pull request or push event), and the test's
    aggregate status (Succeeded, Failed, Completed, None). Based on the pipeline's result, it constructs a
    `metadata.json` file with this data and sends it, along with any test report (e.g., "qd-report" or "e2e-report"),
    to the quality dashboard. The task pulls artifacts from an ORAS container registry and ensures that the correct
    reports are uploaded. If the pipeline succeeded, the status is marked as "success", otherwise, it is "failure"
    or "aborted" depending on the pipeline's status.
  params:
    - name: test-name
      type: string
      description: The name of the test being executed.
    - name: oci-container
      type: string
      description: The ORAS container used to store all test artifacts. From this container will generate one with test tag.
    - name: quality-dashboard-api
      type: string
      description: The API URL for the quality dashboard.
      default: ""
    - name: pipeline-aggregate-status
      type: string
      description: The aggregate status of the pipeline (Succeeded, Failed, Completed, None).
      default: None
    - name: test-event-type
      type: string
      description: Indicates if the job is triggered by a Pull Request or a Push event.
    - name: e2e-report-file
      type: string
      description: Indicates the file name that contain the Junit contain from ginkgo tests.
      default: "e2e-report.xml"
  steps:
    - name: quality-dashboard-metadata
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      workingDir: /workspace
      env:
        - name: GIT_ORGANIZATION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['pac.test.appstudio.openshift.io/url-org']
        - name: GIT_REPOSITORY
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['pac.test.appstudio.openshift.io/url-repository']
        - name: JOB_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['test.appstudio.openshift.io/scenario']
        - name: IS_CANCELLED
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['pac.test.appstudio.openshift.io/cancelled']
        - name: E2E_REPORT_FILE
          value: $(params.e2e-report-file)
      script: |
        #!/bin/bash
        set -e

        PIPELINE_STATUS=$(kubectl get pipelinerun $(params.test-name) -o jsonpath='{.status.conditions[0].reason}')

        # Determine the pipeline status based on the pipeline-aggregate-status param and $PIPELINE_STATUS
        if [ "$(params.pipeline-aggregate-status)" == "Succeeded" ] || [ "$(params.pipeline-aggregate-status)" == "Completed" ]; then
          echo "[INFO] PipelineRun succeeded."
          STATUS="success"
        elif [ "${PIPELINE_STATUS}" = "CancelledRunningFinally" ]; then
          echo "[INFO] PipelineRun was cancelled."
          STATUS="aborted"
        else
          echo "[INFO] PipelineRun failed."
          STATUS="failure"
        fi

        echo "[INFO] Setting STATUS to '$STATUS'"

        # Set the event type to "pull_request" if it's not a push and has a PR number
        if [ "$EVENT_TYPE" != "push" ] && [ -n "$PULL_REQUEST_NUMBER" ]; then
          EVENT_TYPE="pull_request"
        fi

        # Create a metadata JSON file with test details
        CREATED_AT=$(eval date -u +"%Y-%m-%dT%H:%M:%SZ")
        METADATA_JSON=$(cat <<EOF
        {
          "state": "$STATUS",
          "job_id": "$(params.test-name)",
          "created_at": "$CREATED_AT",
          "job_type": "$(params.test-event-type)",
          "job_name": "$JOB_NAME",
          "job_url": "empty",
          "external_impact": false,
          "repository_name": "$GIT_REPOSITORY",
          "git_organization": "$GIT_ORGANIZATION"
        }
        EOF
        )

        # Write the metadata JSON to a file
        echo "$METADATA_JSON" > metadata.json

        echo "[INFO] metadata.json content:"
        cat metadata.json

        # Pull test artifacts from the ORAS container
        oras pull "$(params.oci-container)"

        QD_REPORT_FILENAME=$(find ./ -name "${E2E_REPORT_FILE}" | head -1)

        # Conditional upload: if the report is found, send it; else send only metadata
        if [ -n "$QD_REPORT_FILENAME" ]; then
          echo "[INFO] Report found: $QD_REPORT_FILENAME"
          curl -F "metadata=@./metadata.json" \
              -F "xunit=@$QD_REPORT_FILENAME" \
              -X POST \
              "$(params.quality-dashboard-api)/api/quality/konflux/metadata/post"
        else
          echo "[INFO] Report not found, sending only metadata."
          curl -F "metadata=@./metadata.json" \
              -X POST \
              "$(params.quality-dashboard-api)/api/quality/konflux/metadata/post"
        fi
