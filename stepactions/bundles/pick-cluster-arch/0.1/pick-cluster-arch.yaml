apiVersion: tekton.dev/v1beta1
kind: StepAction
metadata:
  name: pick-cluster-arch
spec:
  description: |
    This StepAction retrieves the supported architectures for a bundle by checking the "operatorframework.io/arch" labels on the bundle CSV.
    If arm64 is supported, the StepAction returns "m6g.large" instance type; otherwise, it returns "m5.large" (amd64).
    If the architecture labels are not defined in the bundle CSV, the function defaults to returning "m5.large" (amd64).
  image: quay.io/konflux-ci/konflux-test:v1.4.35@sha256:7063330148a2de1e53b22c1d263c8a33ecf11816bf7250aa8b23f5f310123dd0
  params:
    - name: bundleImage
      type: string
      description: A bundle image.
  results:
    - name: bundleArch
      description: A bundle-supported architecture, m6g.large (arm64) or m5.large (amd64).
  env:
    - name: BUNDLE_IMAGE
      value: "$(params.bundleImage)"
  script: |
    #!/usr/bin/env bash
    set -euo pipefail
    . /utils.sh

    if [ -z "$BUNDLE_IMAGE" ]; then
      echo "Error: BUNDLE_IMAGE parameter is required." >&2
      exit 1
    fi

    # Run opm render on a bundle image
    if ! bundle_render_out=$(render_opm -t "$BUNDLE_IMAGE"); then
      echo "Failed to render the bundle image" >&2
      exit 1
    fi

    echo "Retrieving bundle-supported architectures..."
    if ! arches=$(get_bundle_arches "$bundle_render_out"); then
      echo "Could not get bundle-supported architectures" >&2
      exit 1
    fi

    # If arm64 is supported, return it; otherwise, return amd64
    if echo "$arches" | grep -q "^arm64$"; then
      echo "arm64 architecture is supported"
      printf "m6g.large" > $(step.results.bundleArch.path)
    else
      echo "amd64 architecture is supported"
      printf "m5.large" > $(step.results.bundleArch.path)
    fi
